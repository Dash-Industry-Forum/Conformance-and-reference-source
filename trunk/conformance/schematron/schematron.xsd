<?xml version="1.0" encoding="UTF-8"?>
<schema 
	xmlns="http://purl.oclc.org/dsdl/schematron"
	xmlns:dash="urn:mpeg:DASH:schema:MPD:2011"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	queryBinding='xslt'
	schemaVersion='ISO19757-3'>
	<ns prefix="dash" uri="urn:mpeg:DASH:schema:MPD:2011"/>
	<ns prefix="xlink" uri="http://www.w3.org/1999/xlink"/>
	<ns prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance"/>
	<title>Schema for validating DASH descriptions</title>

	<pattern name="MPD element">
		<!-- R1.*: Check the conformance of MPD -->
		<rule context="dash:MPD">
			<!-- R1.0 -->
			<assert test="if (@type = 'dynamic' and not(@availabilityStartTime)) then false() else true()">If MPD is of type "dynamic" availabilityStartTime shall be defined.</assert>
			<!-- R1.1 -->
			<assert test="if (@type = 'static' and @timeShiftBufferDepth) then false() else true()">If MPD is of type "static" timeShiftBufferDepth shall not be defined.</assert>
			<!-- R1.2 -->
			<assert test="if (@type = 'static' and not(@mediaPresentationDuration)) then false() else true()">If MPD is of type "static" mediaPresentationDuration shall be defined.</assert>
			<!-- R1.3 -->
			<assert test="if (@type = 'static' and descendant::dash:Period[1]/@start and (years-from-duration(descendant::dash:Period[1]/@start) + months-from-duration(descendant::dash:Period[1]/@start) + days-from-duration(descendant::dash:Period[1]/@start) + hours-from-duration(descendant::dash:Period[1]/@start) + minutes-from-duration(descendant::dash:Period[1]/@start) +  seconds-from-duration(descendant::dash:Period[1]/@start)) > 0) then false() else true()">If MPD is of type "static" and the first period has a start attribute the start attribute shall be zero.</assert>
			<!-- R1.4 -->
			<assert test="if (not(@mediaPresentationDuration) and not(@minimumUpdatePeriod)) then false() else true()">If mediaPresentationDuration ist not defined for the MPD minimumUpdatePeriod shall be defined or vice versa.</assert>
			<!-- R1.5 -->
			<assert test="if (@type = 'static' and @minimumUpdatePeriod) then false() else true()">If MPD is of type "static" minimumUpdatePeriod shall not be defined.</assert>
		</rule>
	</pattern>
	
	<pattern name="Period element">
		<!-- R2.*: Check the conformance of Period -->
		<rule context="dash:Period">
			<!-- R2.0 -->
			<assert test="if (not(@start) and not(preceding-sibling::dash:Period[1]/@duration)) then false() else true()">If the start attribute is not defined for a Period the previous Period element shall contain the duration attribute.</assert>
			<!-- R2.1 -->
			<assert test="if (string(@bitstreamSwitching) = 'true' and string(child::dash:AdaptationSet/@bitstreamSwitching) = 'false') then false() else true()">If bitstreamSwitching is set to true all bitstreamSwitching declarations for AdaptationSet within this Period shall not be set to false.</assert>
			<!-- R2.2 -->
			<assert test="if (@id = preceding::dash:Period/@id) then false() else true()">The id of each Period shall be unique.</assert>
			<!-- R2.3 -->
			<assert test="if ((years-from-duration(@start) + months-from-duration(@start) + days-from-duration(@start) + hours-from-duration(@start) + minutes-from-duration(@start) +  seconds-from-duration(@start)) > (years-from-duration(following-sibling::dash:Period/@start) + months-from-duration(following-sibling::dash:Period/@start) + days-from-duration(following-sibling::dash:Period/@start) + hours-from-duration(following-sibling::dash:Period/@start) + minutes-from-duration(following-sibling::dash:Period/@start) +  seconds-from-duration(following-sibling::dash:Period/@start))) then false() else true()">Periods shall be physically ordered in the MPD file in increasing order of their start time.</assert>
		</rule>
	</pattern>

	<pattern name="AdaptationSet element">
		<!-- R3.*: Check the conformance of AdaptationSet -->
		<rule context="dash:AdaptationSet">
			<!-- R3.0 -->
			<assert test="if (@id = preceding-sibling::dash:AdaptationSet/@id) then false() else true()">The id of each AdaptationSet within a Period shall be unique.</assert>
			<!-- R3.1 -->
			<assert test="if (@group = preceding-sibling::dash:AdaptationSet/@group) then false() else true()">The group of each AdaptationSet within a Period shall be unique.</assert>
			<!-- R3.2 -->
			<assert test="if ((@lang = descendant::dash:ContentComponent/@lang) or (@contentType = descendant::dash:ContentComponent/@contentType) or (@par = descendant::dash:ContentComponent/@par)) then false() else true()">Attributes from the AdaptationSet shall not be repeated in the descendanding ContentComponent elements.</assert>
			<!-- R3.3 -->
			<assert test="if ((@profiles and descendant::dash:Representation/@profiles) or (@width and descendant::dash:Representation/@width) or (@height and descendant::dash:Representation/@height) or (@sar and descendant::dash:Representation/@sar) or (@frameRate and descendant::dash:Representation/@frameRate) or (@audioSamplingRate and descendant::dash:Representation/@audioSamplingRate) or (@mimeType and descendant::dash:Representation/@mimeType) or (@segmentProfiles and descendant::dash:Representation/@segmentProfiles) or (@codecs and descendant::dash:Representation/@codecs) or (@maximumSAPPeriod and descendant::dash:Representation/@maximumSAPPeriod) or (@startWithSAP and descendant::dash:Representation/@startWithSAP) or (@maxPlayoutRate and descendant::dash:Representation/@maxPlayoutRate) or (@codingDependency and descendant::dash:Representation/@codingDependency) or (@scanType and descendant::dash:Representation/@scanType)) then false() else true()">Common attributes for AdaptationSet and Representation shall either be in one of the elements but not in both.</assert>
			<!-- R3.4 -->
			<assert test="if ((@minWidth > @maxWidth) or (@minHeight > @maxHeight) or (@minBandwidth > @maxBandwidth)) then false() else true()">Each minimum value (minWidth, minHeight, minBandwidth) shall be larger than the maximum value.</assert>
			<!-- R3.5 -->
			<assert test="if (descendant::dash:Representation/@bandwidth &lt; @minBandwidth or descendant::dash:Representation/@bandwidth > @maxBandwidth) then false() else true()">The value of the bandwidth attribute shall be in the range defined by the AdaptationSet.</assert>
			<!-- R3.6 -->
			<assert test="if (descendant::dash:Representation/@width &lt; @minWidth or descendant::dash:Representation/@width > @maxWidth) then false() else true()">The value of the width attribute shall be in the range defined by the AdaptationSet.</assert>
			<!-- R3.7 -->
			<assert test="if (descendant::dash:Representation/@height &lt; @minHeight or descendant::dash:Representation/@height > @maxHeight) then false() else true()">The value of the height attribute shall be in the range defined by the AdaptationSet.</assert>
			<!-- R3.8 -->
			<assert test="if (count(child::dash:Representation)=0) then false() else true()">An AdaptationSet shall have at least one Representation element.</assert>
		</rule>
	</pattern>
	
	<pattern name="ContentComponent element">
		<!-- R4.*: Check the conformance of ContentComponent -->
		<rule context="dash:ContentComponent">
			<!-- R4.0 -->
			<assert test="if (@id = preceding-sibling::dash:ContentComponent/@id) then false() else true()">The id of each ContentComponent within an AdaptationSet shall be unique.</assert>
		</rule>
	</pattern>
	
	<pattern name="Representation element">
		<!-- R5.*: Check the conformance of Representation -->
		<rule context="dash:Representation">
			<!-- R5.0 -->
			<assert test="if (not(@mimeType) and not(parent::dash:AdaptationSet/@mimeType)) then false() else true()">Either the Representation or the containing AdaptationSet shall have the mimeType attribute.</assert>
			<!-- R5.1 -->
			<assert test="if (not(@codecs) and not(parent::dash:AdaptationSet/@codecs)) then false() else true()">Either the Representation or the containing AdaptationSet shall have the codecs attribute.</assert>
		</rule>
	</pattern>
	
	<pattern name="SubRepresentation element">
		<!-- R6.*: Check the conformance of SubRepresentation -->
		<rule context="dash:SubRepresentation">
			<!-- R6.0 -->
			<assert test="if (@level and not(@bandwidth)) then false() else true()">If the level attribute is defined for a SubRepresentation also the bandwidth attribute shall be defined.</assert>
		</rule>
	</pattern>	
	
	<pattern name="SegmentTemplate element">
		<!-- R7.*: Check the conformance of SegmentTemplate -->
		<rule context="dash:SegmentTemplate">
			<!-- R7.0 -->
			<assert test="if (not(@duration) and not(child::dash:SegmentTimeline)) then false() else true()">If more than one Media Segment is present the duration attribute or SegmentTimeline element shall be present.</assert>
			<!-- R7.1 -->
			<assert test="if (@duration and child::dash:SegmentTimeline) then false() else true()">Either the duration attribute or SegmentTimeline element shall be present but not both.</assert>
			<!-- R7.2 -->
			<assert test="if (not(@indexRange) and @indexRangeExact) then false() else true()">If indexRange is not present indexRangeExact shall not be present.</assert>
			<!-- R7.3 -->
			<assert test="if (@initialisation and (contains(@initialisation, '$Number$') or contains(@initialisation, '$Time$'))) then false() else true()">Neither $Number$ nor the $Time$ identifier shall be included in the initialisation attribute.</assert>
			<!-- R7.4 -->
			<assert test="if (@bitstreamSwitching and (contains(@bitstreamSwitching, '$Number$') or contains(@bitstreamSwitching, '$Time$'))) then false() else true()">Neither $Number$ nor the $Time$ identifier shall be included in the bitstreamSwitching attribute.</assert>
		</rule>
	</pattern>
	
	<pattern name="SegmentList element">
		<!-- R8.*: Check the conformance of SegmentList -->
		<rule context="dash:SegmentList">
			<!-- R8.0 -->
			<assert test="if (not(@duration) and not(child::dash:SegmentTimeline)) then if (count(child::dash:SegmentURL) > 1) then false() else true() else true()">If more than one Media Segment is present the duration attribute or SegmentTimeline element shall be present.</assert>
			<!-- R8.1 -->
			<assert test="if (@duration and child::dash:SegmentTimeline) then false() else true()">Either the duration attribute or SegmentTimeline element shall be present but not both.</assert>
			<!-- R8.2 -->
			<assert test="if (not(@indexRange) and @indexRangeExact) then false() else true()">If indexRange is not present indexRangeExact shall not be present.</assert>
		</rule>
	</pattern>
	
	<pattern name="SegmentBase element">
		<!-- R9.*: Check the conformance of SegmentBase -->
		<rule context="dash:SegmentBase">
			<!-- R9.0 -->
			<assert test="if (not(@indexRange) and @indexRangeExact) then false() else true()">If indexRange is not present indexRangeExact shall not be present.</assert>
		</rule>
	</pattern>
	
	<pattern name="SegmentTimeline element">
		<!-- R10.*: Check the conformance of SegmentTimeline -->
		<rule context="dash:SegmentTimeline">
			<!-- R10.0 -->
			<assert test="if (child::dash:S/@d > (years-from-duration(ancestor::dash:MPD/@maxSegmentDuration) + months-from-duration(ancestor::dash:MPD/@maxSegmentDuration) + days-from-duration(ancestor::dash:MPD/@maxSegmentDuration) + hours-from-duration(ancestor::dash:MPD/@maxSegmentDuration) + minutes-from-duration(ancestor::dash:MPD/@maxSegmentDuration) +  seconds-from-duration(ancestor::dash:MPD/@maxSegmentDuration))) then false() else true()">The d attribute of a SegmentTimeline shall not exceed the value give by the MPD maxSegmentDuration attribute.</assert>
		</rule>
	</pattern>
	
	<pattern name="ProgramInformation element">
		<!-- R11.*: Check the conformance of ProgramInformation -->
		<rule context="dash:ProgramInformation">
			<!-- R11.0 -->
			<assert test="if (count(parent::dash:MPD/dash:ProgramInformation) > 1 and not(@lang)) then false() else true()">If more than one ProgramInformation element is given each ProgramInformation element shall have a lang attribute.</assert>
			<!-- R11.1 -->
			<assert test="if (@lang = preceding-sibling::dash:ProgramInformation/@lang) then false() else true()">The lang attribute for each ProgramInformation element shall be unique.</assert>
		</rule>
	</pattern>
</schema>
